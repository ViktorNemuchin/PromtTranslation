using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.EntityFrameworkCore;
using PromtTranslation.Domain.Models;
using PromtTranslation.Dtl.NewFolder;

namespace PromtTranslation.Dtl.Context
{
    public class TranslationDbContext:DbContext
    {
        public TranslationDbContext(DbContextOptions<TranslationDbContext> options)
            : base(options: options) 
        {

        }
        
        public DbSet<TranslationModel> Translations;
        
        public DbSet<RouteModel> Routes;

        public DbSet<StatusModel> Statuses;

        public DbSet<TranslationTextModel> TransaltionTexts;

        private static Dictionary<string, Guid> GetGuids()
        {
            var langDictionaries = new Dictionary<string, Guid>();
            langDictionaries.Add("ru", Guid.NewGuid());
            langDictionaries.Add("en", Guid.NewGuid());
            langDictionaries.Add("fr", Guid.NewGuid());
            langDictionaries.Add("it", Guid.NewGuid());
            langDictionaries.Add("da", Guid.NewGuid());
            return langDictionaries;
        }
        protected override void OnModelCreating(ModelBuilder modelBuilder) 
        {
            var seedMethods = new AutoGeneratedData(GetGuids());
            modelBuilder
                .Entity<TranslationModel>()
                .Property(ent => ent.Id)
                .ValueGeneratedOnAdd();

            modelBuilder
                .Entity<TranslationModel>()
                .HasKey(ent => ent.Id);

            modelBuilder
               .Entity<TranslationModel>()
               .HasMany(x => x.Translations);

            modelBuilder
                .Entity<RouteModel>()
                .Property(ent => ent.Id)
                .ValueGeneratedOnAdd();

            modelBuilder
                .Entity<RouteModel>()
                .HasMany(x => x.Translations);

            modelBuilder
                .Entity<RouteModel>()
                .HasKey(ent => ent.Id);
            modelBuilder
                .Entity<RouteModel>()
                .HasMany(x => x.Translations);

            modelBuilder
                .Entity<RouteModel>()
                .HasMany(x => x.LanguageRouteSteps)
                .WithOne(x => x.Route)
                .HasForeignKey(x => x.RouteId);
            
            modelBuilder
                .Entity<RouteModel>()
                .HasData(seedMethods.GetRoutes());

            modelBuilder
                .Entity<LanguageRouteStepsModel>()
                .HasKey(x => x.Id);
            modelBuilder
                .Entity<LanguageRouteStepsModel>()
                .HasData(seedMethods.GetRouteSteps());
            modelBuilder
                .Entity<StatusModel>()
                .HasData(seedMethods.GenerateStatusOnAdd());

            modelBuilder
                .Entity<StatusModel>()
                .Property(ent => ent.Id)
                .ValueGeneratedOnAdd();


            modelBuilder
                .Entity<StatusModel>()
                .HasKey(ent => ent.Id);

            modelBuilder
                .Entity<StatusModel>()
                .HasMany(x => x.Translations);


            modelBuilder
                .Entity<TranslationTextModel>()
                .Property(ent => ent.Id)
                .ValueGeneratedOnAdd();

            modelBuilder
                .Entity<TranslationTextModel>()
                .HasKey(ent => ent.Id);

        }

    }
}
